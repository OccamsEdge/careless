fp <- function() {
return(FP)
}
list(get=get)
}
z <- confusion_matrix(x,y)
z$get()
table(y,x)
table
?table
?as.table
as.table(c(1,2,3,4))
m
m <- matrix(c(4,3,2,1), 2,2)
as.table(m)
as.table(t(m)
)
confusion_matrix <- function(predicted, actual) {
TP <- sum(predicted == 1 & predicted == actual)
FP <- sum(predicted == 1 & predicted != actual)
FN <- sum(predicted == 0 & predicted != actual)
TN <- sum(predicted == 0 & predicted == actual)
m <- matrix(c(TN,FN,FP,TP), 2,2)
get <- function() {
return(as.table(t(m)))
}
tp <- function() {
return(TP)
}
fp <- function() {
return(FP)
}
list(get=get)
}
z <- confusion_matrix(x,y)
z$get()
confusion_matrix <- function(predicted, actual) {
TP <- sum(predicted == 1 & predicted == actual)
FP <- sum(predicted == 1 & predicted != actual)
FN <- sum(predicted == 0 & predicted != actual)
TN <- sum(predicted == 0 & predicted == actual)
m <- matrix(c(TN,FN,FP,TP), 2,2)
get <- function() {
return(as.table(t(m)), dnn = c('Predicted', 'Actual'))
}
tp <- function() {
return(TP)
}
fp <- function() {
return(FP)
}
list(get=get)
}
z <- confusion_matrix(x,y)
z$get()
confusion_matrix <- function(predicted, actual) {
TP <- sum(predicted == 1 & predicted == actual)
FP <- sum(predicted == 1 & predicted != actual)
FN <- sum(predicted == 0 & predicted != actual)
TN <- sum(predicted == 0 & predicted == actual)
m <- matrix(c(TN,FN,FP,TP), 2,2)
get <- function() {
return(as.table(t(m), dnn = c('Predicted', 'Actual')))
}
tp <- function() {
return(TP)
}
fp <- function() {
return(FP)
}
list(get=get)
}
z <- confusion_matrix(x,y)
z$get()
confusion_matrix <- function(predicted, actual) {
TP <- sum(predicted == 1 & predicted == actual)
FP <- sum(predicted == 1 & predicted != actual)
FN <- sum(predicted == 0 & predicted != actual)
TN <- sum(predicted == 0 & predicted == actual)
m <- matrix(c(TN,FN,FP,TP), 2,2)
get <- function() {
return(as.table(t(m), dnn = c('Predicted', 'Actual')))
}
tp <- function() {
return(TP)
}
fp <- function() {
return(FP)
}
list(get=get)
}
z <- confusion_matrix(x,y)
z$get()
confusion_matrix <- function(predicted, actual) {
TP <- sum(predicted == 1 & predicted == actual)
FP <- sum(predicted == 1 & predicted != actual)
FN <- sum(predicted == 0 & predicted != actual)
TN <- sum(predicted == 0 & predicted == actual)
m <- matrix(c(TN,FN,FP,TP), 2,2)
get <- function() {
return(as.table(t(m), dnn = c('Predicted', 'Actual')), deparse.level=2 )
}
tp <- function() {
return(TP)
}
fp <- function() {
return(FP)
}
list(get=get)
}
z <- confusion_matrix(x,y)
z$get()
confusion_matrix <- function(predicted, actual) {
TP <- sum(predicted == 1 & predicted == actual)
FP <- sum(predicted == 1 & predicted != actual)
FN <- sum(predicted == 0 & predicted != actual)
TN <- sum(predicted == 0 & predicted == actual)
m <- matrix(c(TN,FN,FP,TP), 2,2)
get <- function() {
return(as.table(t(m), dnn = c('Predicted', 'Actual'), deparse.level=2 ))
}
tp <- function() {
return(TP)
}
fp <- function() {
return(FP)
}
list(get=get)
}
z <- confusion_matrix(x,y)
z$get()
ftable(mtcars$cyl, mtcars$vs, mtcars$am, mtcars$gear, row.vars = c(2, 4),
dnn = c("Cylinders", "V/S", "Transmission", "Gears"))
x
y
m
ftable(m, row.vars = "Predicted", col.vars="Actual")
ftable(m, row.vars = c(1,0), col.vars = c(1,0))
as.factor(c(0,1))
ftable(Titanic, row.vars = 1:2, col.vars = "Survived")
m
m[1:2]
t(m)
ftable(c(x,y), row.vars= 1:2, col.vars = "y")
str(titanic)
str(Titanic)
table(x,y)
table(-x,-y)
x
1-x
table(1-x,1-y)
table(1-x,1-y, dnn= c('Predicted', 'Actual'))
z <- table(1-x,1-y, dnn= c('Predicted', 'Actual'))
colnames(z)
dimnames()
dimnames(z, c("1", "0", "1", "0"))
provideDimnames(z, c("1", "0", "1", "0"))
provideDimnames(z, c("1", "1", "1", "0"))
provideDimnames(z, base=list("1","0"))
provideDimnames(z, base=list("0","1"))
provideDimnames(z, base=list("0","1", "1", "1"))
?table
z <- table(1-x,1-y, dnn= c('Predicted', 'Actual'), row.names = c("1", ))
z <- table(1-x,1-y, dnn= c('Predicted', 'Actual'), row.names = c("1", "1"))
z <- table(1-x,1-y, dnn= c('Predicted', 'Actual'), row.names = c("1", "1", "1", "1"))
z <- table(1-x,1-y, dnn= c('Predicted', 'Actual'), stringsAsFactors = F)
z <- table(1-x,1-y, dnn= c('Predicted', 'Actual'))
z
z <- table(1-y,1-x, dnn= c('Predicted', 'Actual'))
z
z <- table(1-x,1-y, dnn= c('Predicted', 'Actual'))
z
warpbreaks$replicate <- rep_len(1:9, 54)
ftable(xtabs(breaks ~ wool + tension + replicate, data = warpbreaks))
warpbreaks
xtabs(x,y)
xtabs(data=c(x,y), x ~ y)
z
x
y
xtabs(data=c(x,y), y ~ x)
?data.frame()
len(x)
length(x)
length(y)
tp
TP <- sum(predicted == 1 & predicted == actual)
FP <- sum(predicted == 1 & predicted != actual)
FN <- sum(predicted == 0 & predicted != actual)
TN <- sum(predicted == 0 & predicted == actual)
predicted <- x
actual <- y
TP <- sum(predicted == 1 & predicted == actual)
FP <- sum(predicted == 1 & predicted != actual)
FN <- sum(predicted == 0 & predicted != actual)
TN <- sum(predicted == 0 & predicted == actual)
data.frame(4,3)
data.frame("Contingency", "pp", "rp")
data.frame("Contingency", 1, 1)
d <- data.frame()
colnames(d) <- c("contingency", "pp", "rp")
m
as.data.frame((m))
a = c("tp", 1, 1)
b = c("fp", 1, 0)
c = c("fn", 0, 1)
d = c("tn", 0, 0)
d[0] <- a
d[1]
d[0,] <- a
d <- data.frame()
d[0,] <- a
d[0,] <- t(a)
rbind(a,b,c,d)
d <- rbind(a,b,c,d)
d <- c("tn", 0, 0)
z <- rbind(a,b,c,d)
z
z <- as.data.frame(rbind(a,b,c,d))
z
rownames(d) <- N/A
rownames(d) <- NA
?rownames()
rownames(d, do.null=T)
rownames(d, do.null= TRUE)
rownames(d) <- NULL
d
rownames(z) <- NULL
z
a <- c(4,1,1)
b <- c(3,1,0)
c <- c(2,0,1)
d <- c(1,0,0)
z <- rbind(a,b,c,d)
rownames(z) <- NULL
xtabs(z)
xtabs(z, v1 ~ v2,v3)
xtabs(z, v1 ~ v2 + v3)
?xtabs
xtabs(V1 ~ V2 + V3, data=z)
colnames(xtabs(V1 ~ V2 + V3, data=z))
x
z <- table(1-x,1-y)
z
colnames(z) <- c('1', '0')
z
z
xtabs(x,y)
xtabs(x~y)
xtabs(count ~ x y)
z <- data.frame(nrow=2,ncol=4)
z
z <- data.frame(matrix(nrow=4,ncol=3))
z
init_df <- function(nrow, ncol, ...) {
args <- list(...)
return(args)
}
init_df(1,2, "one", "two")
init_df <- function(nrow, ncol, ...) {
args <- list(...)
return(c(args))
}
init_df(1,2, "one", "two")
init_df <- function(nrow, ncol, ...) {
return(data.frame(matrix(nrow=nrow, ncol=ncol, colnames = c(args))))
}
init_df(4,3, "count", "pp", "rp")
exit
quit
?data.frame
init_df <- function(nrow, ncol, ...) {
return(data.frame(matrix(nrow=nrow, ncol=ncol) colnames = c(args)))
}
init_df <- function(nrow, ncol, ...) {
return(data.frame(matrix(nrow=nrow, ncol=ncol) colnames = c(args))))
}
init_df <- function(nrow, ncol, ...) {
return(data.frame(matrix(nrow=nrow, ncol=ncol) colnames = c(args)))
}
init_df <- function(nrow, ncol, ...) {
return(data.frame(matrix(nrow=nrow, ncol=ncol), colnames = c(args)))
}
init_df(4,3, "count", "pp", "rp")
init_df <- function(nrow, ncol, ...) {
return(data.frame(matrix(nrow=nrow, ncol=ncol)))
}
init_df(4,3, "count", "pp", "rp")
init_df <- function(nrow, ncol, ...) {
args <- list(...)
m <- data.frame(matrix(nrow=nrow, ncol=ncol))
colnames(m) <- args
return(m)
}
init_df(4,3, "count", "pp", "rp")
df[1,]
z <- init_df(4,3, "count", "pp", "rp")
z [1,]
z[1,] <- c(4,1,1)
z
z <- init_df(4,3, "state" "count", "pp", "rp")
z <- init_df(4,4, "state" "count", "pp", "rp")
z <- init_df(4,4, "state", "count", "pp", "rp")
z
confusion_matrix <- function(predicted, real) {
tau <- init_df(4,4, "state","count", "pp", "rp")
TP <- sum(predicted == 1 & predicted == actual)
FP <- sum(predicted == 1 & predicted != actual)
FN <- sum(predicted == 0 & predicted != actual)
TN <- sum(predicted == 0 & predicted == actual)
tau[1,] <- c("tp", TP, 1, 1)
tau[2,] <- c("fp", FP, 1, 0)
tau[3,] <- c("fn", FN, 0, 1)
tau[4,] <- c("tn", TN, 0, 0)
get <- function() {
return(tau)
}
tp <- function() {
return(TP)
}
fp <- function() {
return(FP)
}
list(get=get)
}
init_df <- function(nrow, ncol, ...) {
args <- list(...)
m <- data.frame(matrix(nrow=nrow, ncol=ncol))
colnames(m) <- args
return(m)
}
z <- confusion_matrix(x,y)
z
z$get()
xtabs(freqs ~ pp + rp, data=z$get())
xtabs(counts ~ pp + rp, data=z$get())
xtabs(count ~ pp + rp, data=z$get())
xtabs(state ~ pp + rp, data=z$get())
xtabs(x,y)
xtabs(z, v1 ~ v2 + v3)
?xtabs
class(z$get())
m <- z$get()
xtabs(count ~ pp, rp, data = m)
m
xtabs(m$count ~ m$pp + m$rp)
xtabs(count ~ pp, data=m)
table(m)
?table
table(1-x, 1-y)
x
tp <- if(x == 1 & x == y) 1 else 0
tp
tp <- if((x == 1 & x == y)) 1 else 0
tp <- (x == 1 & x == y)
tp
tp <- as.numeric((x == 1 & x == y))
tp
conf_matrix <- function(x,y) {
if (x !is.numeric() | y !is.numeric()) stop("All arguments must be numeric")
structure(list(x), class = "conf_matrix")
}
conf_matrix <- function(x,y) {
if (x !is.numeric() | y !is.numeric()) stop("All arguments must be numeric")
structure(list(x,y), class = "conf_matrix")
}
conf_matrix <- function(x,y) {
if (x !is.numeric() | y !is.numeric()) {
stop("All arguments must be numeric")
}
structure(list(x,y), class = "conf_matrix")
}
y <- 1
g <- function(x) {
y <- 2
UseMethod("g")
}
g.numeric <- function(x) y
g(10)
h <- function(x) {
x <- 10
UseMethod("h")
}
h.character <- function(x) paste("char", x)
h.numeric <- function(x) paste("num", x)
h("a")
g(100)
dds
setClass("dds",
slots = list(
name = "character"
careless_indicator = "numeric"
careless_model = "character"
raw = "data.frame"
)
)
setClass("dds",
slots = list(
name = "character",
careless_indicator = "numeric",
careless_model = "character",
raw = "data.frame",
)
)
setClass("dds",
slots = list(
name = "character",
careless_indicator = "numeric",
careless_model = "character",
raw = "data.frame"
)
)
z
z$get
z$get()
table(x,y)
x
y
z
y = c(1,0,1,0,1,1,1,0,0,1)
table(x,y)
class(table(x,y))
z <- table(x,y)
class(z)
attributes(z)
dimnames(z) <- c("what", "the")
dimnames(z) <- list("what", "the")
dimnames(z)
colnames(z)
x
y
classifier_metrics <- function(predicted, real) {
is.tp <- as.numeric((predicted == 1 & predicted == real))
is.fp <- as.numeric((predicted == 1 & predicted != real))
is.fn <- as.numeric((predicted == 0 & predicted != real))
is.tn <- as.numeric((predicted == 0 & predicted == real))
TP <- sum(is.tp)
FP <- sum(is.fp)
FN <- sum(is.fn)
TN <- sum(is.tn)
predicted <- 1-predicted
real <- 1-real
tau <- table(predicted, real)
colnames(tau) <- c("1", "0")
rownames(tau) <- c("1", "0")
raw <- cbind(predicted, real, is.tp, is.fp, is.fn, is.tn)
tp <- function() {
return(TP)
}
fp <- function() {
return(FP)
}
fn <- function() {
return(FN)
}
tn <- function() {
return(TN)
}
get <- function() {
return(table(x,y))
}
self <- list(get=get,
tp=tp,
fp=fp,
fn=fn,
tn=tn)
}
z <- classifier_metrics(x,y)
x$get
classifier_metrics <- function(predicted, real) {
is.tp <- as.numeric((predicted == 1 & predicted == real))
is.fp <- as.numeric((predicted == 1 & predicted != real))
is.fn <- as.numeric((predicted == 0 & predicted != real))
is.tn <- as.numeric((predicted == 0 & predicted == real))
TP <- sum(is.tp)
FP <- sum(is.fp)
FN <- sum(is.fn)
TN <- sum(is.tn)
predicted <- 1-predicted
real <- 1-real
tau <- table(predicted, real)
colnames(tau) <- c("1", "0")
rownames(tau) <- c("1", "0")
raw <- cbind(predicted, real, is.tp, is.fp, is.fn, is.tn)
tp <- function() {
return(TP)
}
fp <- function() {
return(FP)
}
fn <- function() {
return(FN)
}
tn <- function() {
return(TN)
}
get <- function() {
return(tau)
}
self <- list(get=get,
tp=tp,
fp=fp,
fn=fn,
tn=tn)
}
z <- classifier_metrics(x,y)
x$get()
z$get()
z$tp()
install.packages("rfUtilities")
library(rfUtilities)
accuracy(table(x,y))
